import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

configfile: 'config/config.yaml'

rule all:
    input:
        'results/tmb_all_samples.png'
    shell: 'rm -rf processed_data'

rule fix_maf_space:
    input: 'data/mc3.v0.2.8.PUBLIC.maf'
    output: 'processed_data/mc3.maf'
    message: 'Changing line breaks of the MAF file'
    shell: 'perl -lne \'s/\\r//; print "$_";\' {input} > {output}'

rule find_maf_coord:
    input: 'processed_data/mc3.maf'
    output: 'processed_data/mc3.bed'
    message: 'Extracting mutations coordinates'
    shell: 'cut -f5-7 {input} | tail -n +2 | sort -k1,1 -k2,2n > {output}'

rule remove_maf_dupes:
    input: 'processed_data/mc3.bed'
    output: 'processed_data/mc3_merged.bed'
    message: 'Removing duplicates coordinates'
    shell: 'bedtools merge -i {input} > {output}'

rule ccds_format:
    input: 'data/CCDS.20131129.txt'
    output: 'processed_data/CCDS.bed'
    message: 'Making a BED file from exon coordinates'
    shell: 'cut -f1,8,9 {input} | sort -k1,1 -k2,2n | tail -n +3 > {output}'

rule find_intersect:
    input:
        mc3_file='processed_data/mc3_merged.bed',
        CCDS_file='processed_data/CCDS.bed'
    output: 'processed_data/mut_at_CCDS.bed'
    message: 'Finding the mutation coordinates at exonic regions'
    shell: 'bedtools intersect -sorted -wa -a {input.mc3_file} -b {input.CCDS_file} > {output}'

rule remove_dupes:
    input: 'processed_data/mut_at_CCDS.bed'
    output: 'processed_data/mut_no_dup.bed'
    message: 'Removing duplicate exonic mutations'
    shell: 'bedtools merge -i {input} > {output}'

rule find_TMB:
    input:
        maf_file='processed_data/mc3.maf',
        exon_coord='processed_data/mut_no_dup.bed'
    output: 'results/tmb.tsv'
    message: 'Finding tumor mutation burden per sample'
    shell: 'Rscript workflow/findTMB.R {input.maf_file} {input.exon_coord} > {output}'

rule make_plots:
    input:
        tss_file='data/tissueSourceSite.tsv',
        tmb_file='results/tmb.tsv'
    output:
        all_tmb_fig='results/tmb_all_samples.png',
        tmb_no_out_fig='results/tmb_without_outliers.png',
        range_fig='results/range_of_tmb.png',
        intq_range_fig='results/interquantile_range_of_tmb.png'
    message: 'Making final figures'
    run:
        # read input files
        cwd=os.getcwd()
        tmb=pd.read_csv(('cwd/'+input.tmb_file), delimiter = '\t')
        tss=pd.read_csv(('cwd/'+input.tss_file), delimiter = '\t')

        # label samples with TCGA category
        tcga_type=[]

        for i in tmb.Tumor_Sample_Barcode:
            st_ind = i.find('-')
            end_ind = i.find('-',(i.find('-')+1))
            code = i[st_ind+1 : end_ind]
            if code=='NA':
                t_type = 'Not known'
            else:
                t_type = tss[tss['TSS Code']==code]['Study Name'].to_string(index=False)
            tcga_type.append(t_type)

        tmb['tcga_type'] = pd.Series(tcga_type)

        # sort by medians
        grp_m=tmb.iloc[:,2:4].groupby('tcga_type').median()
        grp_m=pd.DataFrame(grp_m)
        grp_m=grp_m.sort_values(by='tmb', ascending=False)

        # boxplot with outliers
        plt.figure(figsize=(12, 10), facecolor='white')
        dd=pd.melt(tmb,id_vars=['tcga_type'],value_vars=['tmb'])
        box_plot=sns.boxplot(x=tmb.tcga_type, y=tmb.tmb, data=dd, order=grp_m.index)
        box_plot.set_xticklabels(box_plot.get_xticklabels(),rotation=90)
        plt.title('Boxplot of TMB values per TCGA category (mutations/megabase)')
        plt.suptitle('')
        plt.tight_layout()
        plt.savefig(fname=output.all_tmb_fig, dpi=199)

        # boxplot without outliers
        pl = plt
        pl.figure(figsize=(12, 10), facecolor='white')
        dd=pd.melt(tmb,id_vars=['tcga_type'],value_vars=['tmb'])
        box_plot2=sns.boxplot(x=tmb.tcga_type, y=tmb.tmb, data=dd, sym='', order=grp_m.index)
        box_plot2.set_xticklabels(box_plot2.get_xticklabels(),rotation=90)
        pl.title('Boxplot of TMB per TCGA category after removing the outliers (mutations/megabase)')
        pl.suptitle('')
        pl.tight_layout()
        pl.savefig(fname=output.tmb_no_out_fig, dpi=199)

        # calculate range of tmb
        tmb_max=tmb.iloc[:,2:4].groupby('tcga_type').max()['tmb']
        tmb_min=tmb.iloc[:,2:4].groupby('tcga_type').min()['tmb']
        tmb_range=tmb_max-tmb_min
        tmb_range=tmb_range.sort_values(ascending=False)

        # plot of ranges
        pl2 = plt
        pl2.figure(figsize=(12, 10), facecolor='white')
        pl2.xticks(rotation=90)
        pl2.plot(tmb_range, marker='v', linestyle='--')
        pl2.title('Ranges of TMB (mutations/megabase) per TCGA category')
        pl2.suptitle('')
        pl2.tight_layout()
        pl2.savefig(fname=output.range_fig, dpi=199)

        # calculate interquantile range of tmb
        tmb_25_q=tmb.iloc[:,2:4].groupby('tcga_type').quantile(q=0.25)['tmb']
        tmb_75_q=tmb.iloc[:,2:4].groupby('tcga_type').quantile(q=0.75)['tmb']
        tmb_interq_range=tmb_75_q-tmb_25_q
        tmb_interq_range=tmb_interq_range.sort_values(ascending=False)

        # plot of interquantile ranges
        pl3 = plt
        pl3.figure(figsize=(12, 10), facecolor='white')
        pl3.xticks(rotation=90)
        pl3.plot(tmb_interq_range, marker='o', linestyle='--')
        pl3.title('Interquantile range (25th to 75th) of TMB (mutations/megabase) per TCGA category')
        pl3.suptitle('')
        pl3.tight_layout()
        pl3.savefig(fname=output.intq_range_fig, dpi=199)
